#!groovy
podTemplate(
  label: "skopeo-pod",
  cloud: "openshift",
  inheritFrom: "maven",
  containers: [
    containerTemplate(
      name: "jnlp",
      image: "docker-registry.default.svc:5000/${GUID}-jenkins/jenkins-agent-appdev",
      resourceRequestMemory: "1Gi",
      resourceLimitMemory: "2Gi",
      resourceRequestCpu: "1",
      resourceLimitCpu: "2"
    )
  ]
) {
  node('skopeo-pod') {
    // Define Maven Command to point to the correct
    // settings for our Nexus installation
    def mvnCmd = "mvn clean install -DskipTests=true -s ../nexus_settings.xml"
    def mvnTest = "mvn test -s ../nexus_settings.xml"
    
    // Set Development and Production Project Names
    def devProject  = "${GUID}-tasks-dev"
    def prodProject = "${GUID}-tasks-prod"

    def sonarURL	  = "http://sonarqube-gpte-hw-cicd.apps.na311.openshift.opentlc.com"
    def mvnSonar    = "mvn sonar:sonar -s ../nexus_settings.xml -Dsonar.host.url=${sonarURL}"

    def nexusURL	  = "http://nexus3.gpte-hw-cicd.svc.cluster.local:8081"
    def mvnNexus    = "mvn -s ../nexus_settings.xml deploy -DskipTests=true -DaltDeploymentRepository=nexus::default::${nexusURL}/repository/releases"

    // Checkout Source Code.
    stage('Checkout Source') {
      checkout scm
    }

    // Build the Tasks Service
    dir('openshift-tasks') {
      // The following variables need to be defined at the top level
      // and not inside the scope of a stage - otherwise they would not
      // be accessible from other stages.
      // Extract version from the pom.xml
      def version = getVersionFromPom("pom.xml")

      // TBD Set the tag for the development image: version + build number
      def devTag  = "${version}" + "-" + currentBuild.number

      // Set the tag for the production image: version
      def prodTag = "${version}"

      // Using Maven build the war file
      // Do not run tests in this step
      stage('Build war') {
        echo "Building version ${devTag}"

        sh "${mvnCmd}" 
      }

      // TBD: The next two stages should run in parallel
      stage("Tests and Analysis") {
        parallel (
          // Unit Tests
          "Unit Tests": {
            echo "Running Unit Tests"
            sh "${mvnTest}"
          },
          // Sonar Code Analysis
          "Code Analysis": {
            echo "Running Sonar Code Analysis"
            sh "${mvnSonar}"
          },
          failFast: true
        )
      }

      // Publish the built war file to Nexus
      stage('Publish to Nexus') {
        echo "Publish to Nexus"
        sh "${mvnNexus}"
      }

      // Build the OpenShift Image in OpenShift and tag it.
      stage('Build and Tag OpenShift Image') {
        echo "Building OpenShift container image tasks:${devTag}"
        openshift.withCluster() {
          openshift.withProject("${devProject}") {
            echo "Now using project ${devProject}"
            def nexusFile	= "http://nexus3.gpte-hw-cicd.svc.cluster.local:8081/repository/releases/org/jboss/quickstarts/eap/tasks/${version}/tasks-${version}.war" 
            openshift.selector("bc", "tasks").startBuild("--from-file=${nexusFile}", "--wait=true")
            openshift.tag("tasks:latest", "tasks:${devTag}")
          }
        }
      }

      // Deploy the built image to the Development Environment.
      stage('Deploy to Dev') {
        echo "Deploying container image to Development Project"
        openshift.withCluster() {
            // Use project/namespace "tasks-dev"
            openshift.withProject("${devProject}") {

              echo "Now using project ${devProject}"

              // update the image
              openshift.set("image", "dc/tasks", "tasks=docker-registry.default.svc:5000/${devProject}/tasks:${devTag}")

              // configmap
              openshift.selector('configmap', 'tasks-config').delete()
              def configmap = openshift.create('configmap', 'tasks-config', '--from-file=./configuration/application-users.properties', '--from-file=./configuration/application-roles.properties' )

              // VERSION env variable
              openshift.set("env", "dc/tasks", "'VERSION=${devTag} (tasks-dev)'")
              openshift.selector("dc", "tasks").rollout().latest()

              def dc = openshift.selector("dc", "tasks").object()
              def dc_version = dc.status.latestVersion
              def rc = openshift.selector("rc", "tasks-${dc_version}").object()

              echo "Waiting for ReplicationController tasks-${dc_version} to be ready"
              while (rc.spec.replicas != rc.status.readyReplicas) {
                sleep 5
                rc = openshift.selector("rc", "tasks-${dc_version}").object()
              }
            }
          }
      }

      // Copy Image to Nexus container registry
      stage('Copy Image to Nexus container registry') {
        echo "Copy image to Nexus container registry"

        // TBD: Copy image to Nexus container registry

        // TBD: Tag the built image with the production tag.
      }

      // Blue/Green Deployment into Production
      // -------------------------------------
      def destApp   = "tasks-green"
      def activeApp = ""

      stage('Blue/Green Production Deployment') {
        // TBD: Determine which application is active
        //      Set Image, Set VERSION
        //      Deploy into the other application
        //      Make sure the application is running and ready before proceeding
      }

      stage('Switch over to new Version') {
        echo "Switching Production application to ${destApp}."
        // TBD: Execute switch
      }
    }
  }
}

// Convenience Functions to read version from the pom.xml
// Do not change anything below this line.
// --------------------------------------------------------
def getVersionFromPom(pom) {
  def matcher = readFile(pom) =~ '<version>(.+)</version>'
  matcher ? matcher[0][1] : null
}